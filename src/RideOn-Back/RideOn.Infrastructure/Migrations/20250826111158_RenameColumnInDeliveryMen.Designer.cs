// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RideOn.Infrastructure.Context;

#nullable disable

namespace RideOn.Infrastructure.Migrations
{
    [DbContext(typeof(RideOnDbContext))]
    [Migration("20250826111158_RenameColumnInDeliveryMen")]
    partial class RenameColumnInDeliveryMen
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RideOn.Domain.Entities.DeliveryMan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("Created_by")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("Updated_by")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("delivery_men", (string)null);
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("Created_by")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("Updated_by")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("motorcycles", (string)null);
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("Created_by")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("daily_rate");

                    b.Property<Guid>("DeliveryManId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTimeOffset>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_end_date");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Plane")
                        .HasColumnType("integer")
                        .HasColumnName("plane");

                    b.Property<DateTimeOffset>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("return_date");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("Updated_by")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryManId")
                        .HasDatabaseName("IX_RentalContracts_DeliveryManId");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("IX_RentalContracts_EndDate");

                    b.HasIndex("MotorcycleId")
                        .IsUnique()
                        .HasDatabaseName("IX_RentalContracts_MotorcycleId");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_RentalContracts_StartDate");

                    b.HasIndex("DeliveryManId", "StartDate", "EndDate")
                        .HasDatabaseName("IX_RentalContracts_DeliveryMan_Period");

                    b.ToTable("rental_contracts", (string)null);
                });

            modelBuilder.Entity("RideOn.Domain.Entities.DeliveryMan", b =>
                {
                    b.OwnsOne("RideOn.Domain.ValueObjects.CNH", "CNH", b1 =>
                        {
                            b1.Property<Guid>("DeliveryManId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CnhImage")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("cnh_image");

                            b1.Property<string>("CnhNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("cnh_number");

                            b1.Property<string>("CnhType")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("cnh_type");

                            b1.HasKey("DeliveryManId");

                            b1.ToTable("delivery_men");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryManId");
                        });

                    b.OwnsOne("RideOn.Domain.ValueObjects.CNPJ", "CNPJ", b1 =>
                        {
                            b1.Property<Guid>("DeliveryManId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Cnpj")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("DeliveryManId");

                            b1.HasIndex("Cnpj")
                                .IsUnique()
                                .HasDatabaseName("IX_DeliveryMen_CNPJ");

                            b1.ToTable("delivery_men");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryManId");
                        });

                    b.Navigation("CNH");

                    b.Navigation("CNPJ");
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Motorcycle", b =>
                {
                    b.OwnsOne("RideOn.Domain.ValueObjects.Plate", "Plate", b1 =>
                        {
                            b1.Property<Guid>("MotorcycleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("plate");

                            b1.HasKey("MotorcycleId");

                            b1.HasIndex("Number")
                                .IsUnique()
                                .HasDatabaseName("IX_Motorcycles_Plate");

                            b1.ToTable("motorcycles");

                            b1.WithOwner()
                                .HasForeignKey("MotorcycleId");
                        });

                    b.Navigation("Plate");
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Rental", b =>
                {
                    b.HasOne("RideOn.Domain.Entities.DeliveryMan", "DeliveryMan")
                        .WithMany("Rentals")
                        .HasForeignKey("DeliveryManId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RideOn.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithOne("Rental")
                        .HasForeignKey("RideOn.Domain.Entities.Rental", "MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryMan");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("RideOn.Domain.Entities.DeliveryMan", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Motorcycle", b =>
                {
                    b.Navigation("Rental");
                });
#pragma warning restore 612, 618
        }
    }
}
