// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RideOn.Infrastructure.Context;

#nullable disable

namespace RideOn.Infrastructure.Migrations
{
    [DbContext(typeof(RideOnDbContext))]
    partial class RideOnDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RideOn.Domain.Entities.CNH", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CnhImage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CnhType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Created_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeliveryManId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CnhNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_CNH_CnhNumber");

                    b.HasIndex("DeliveryManId")
                        .IsUnique();

                    b.ToTable("cnhs", (string)null);
                });

            modelBuilder.Entity("RideOn.Domain.Entities.DeliveryMan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique()
                        .HasDatabaseName("IX_DeliveryMen_CNPJ");

                    b.ToTable("delivery_men", (string)null);
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Plate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Updated_by")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Plate")
                        .IsUnique()
                        .HasDatabaseName("IX_Motorcycles_Plate");

                    b.ToTable("motorcycles", (string)null);
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Created_by")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("DeliveryManId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryManId")
                        .HasDatabaseName("IX_RentalContracts_DeliveryManId");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("IX_RentalContracts_EndDate");

                    b.HasIndex("MotorcycleId")
                        .IsUnique()
                        .HasDatabaseName("IX_RentalContracts_MotorcycleId");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_RentalContracts_StartDate");

                    b.HasIndex("DeliveryManId", "StartDate", "EndDate")
                        .HasDatabaseName("IX_RentalContracts_DeliveryMan_Period");

                    b.ToTable("rental_contracts", (string)null);
                });

            modelBuilder.Entity("RideOn.Domain.Entities.CNH", b =>
                {
                    b.HasOne("RideOn.Domain.Entities.DeliveryMan", "DeliveryMan")
                        .WithOne("CNH")
                        .HasForeignKey("RideOn.Domain.Entities.CNH", "DeliveryManId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMan");
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Rental", b =>
                {
                    b.HasOne("RideOn.Domain.Entities.DeliveryMan", "DeliveryMan")
                        .WithMany("Rentals")
                        .HasForeignKey("DeliveryManId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RideOn.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithOne("Rental")
                        .HasForeignKey("RideOn.Domain.Entities.Rental", "MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryMan");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("RideOn.Domain.Entities.DeliveryMan", b =>
                {
                    b.Navigation("CNH");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RideOn.Domain.Entities.Motorcycle", b =>
                {
                    b.Navigation("Rental");
                });
#pragma warning restore 612, 618
        }
    }
}
